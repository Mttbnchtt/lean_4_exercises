Operations on List in Lean
---------------------------

Lean’s standard library provides a rich set of functions for working with lists.
Most of these functions are defined in the List namespace. Here are some commonly
used operations on lists in Lean:

1. Constructors and Basic Operations
   -----------------------------------
   - Empty List:
       [] 
     Represents the empty list.

   - Cons Operator:
       a :: l
     Constructs a new list by prepending element 'a' to list 'l'.

   - List Literal:
       [a, b, c]
     A shorthand for writing lists, equivalent to: a :: b :: c :: [].

   - Appending:
       l₁ ++ l₂
     Concatenates two lists.

2. Accessing Elements
   --------------------
   - Head (Optional):
       List.head? l
     Returns the first element of the list wrapped in an Option 
     (i.e., some a if nonempty, none if empty).

   - Tail (Optional):
       List.tail? l
     Returns all elements except the first, as an Option (List α).

   - Nth Element:
       List.nth l i
     Returns the i-th element of the list (if it exists) as an Option α.

3. Transformations
   ------------------
   - Mapping:
       List.map f l
     Applies the function f to every element of list l, returning a new list.

   - Filtering:
       List.filter p l
     Returns a new list containing only those elements of l for which the
     predicate p returns true.

   - Concatenation of Lists:
       List.join l
     Flattens a list of lists into a single list.

   - Flat Map:
       List.bind l f  (or using the operator: l >>= f)
     Applies a function f that returns a list to each element of l and concatenates
     the results.

4. Reductions and Aggregations
   -----------------------------
   - Folding:
       List.foldl f init l   -- Left fold: processes the list from left to right.
       List.foldr f init l   -- Right fold: processes the list from right to left.

   - Summing:
       List.sum l
     Sums the elements of the list, assuming the element type has instances for
     addition and a zero element.

   - Product:
       List.prod l
     Computes the product of the elements of the list, assuming the element type
     has multiplication and a one.

5. Other Useful Operations
   --------------------------
   - Length:
       List.length l
     Returns the number of elements in the list.

   - Reverse:
       List.reverse l
     Returns a new list with the elements of l in reverse order.

   - Range Generation:
       List.range n
     Produces a list of natural numbers from 0 to n-1.
       There is also:
       List.range' start n
     which produces a list of length n starting from 'start'.

   - Zip and Unzip:
       List.zip l₁ l₂
     Combines two lists into a list of pairs.
       List.unzip l
     Splits a list of pairs into a pair of lists.

   - Membership Test:
       List.mem a l   (or you can use: a ∈ l)
     Checks if an element a is present in list l.

6. Example Usage
   ---------------
   For example, to define a function that creates a list of even numbers from 0 to n-1,
   then maps over them to add 10 to each, you might write:

       def example (n : Nat) : List Nat :=
         let nums := List.range n          -- Generates [0, 1, ..., n-1]
         let evens := nums.filter (fun x => x % 2 = 0)
         evens.map (fun x => x + 10)
       
       #eval example 10  -- Output might be: [10, 12, 14, 16, 18]

7. Summary
   --------
   Lean provides many functions in the List module for constructing, transforming,
   and reducing lists in a purely functional style. Although Lean’s syntax and functional
   approach might differ from imperative languages like Python, many of the core concepts
   (such as mapping, filtering, folding, etc.) are very similar to those in languages like
   Python, Haskell, or OCaml.